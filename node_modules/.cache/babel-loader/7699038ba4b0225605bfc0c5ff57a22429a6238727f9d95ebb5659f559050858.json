{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const useForm = (initialValues, validationRules = {}) => {\n  _s();\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n  const validateField = (name, value) => {\n    const rules = validationRules[name];\n    if (!rules) return '';\n    for (const rule of rules) {\n      const error = rule(value, values);\n      if (error) return error;\n    }\n    return '';\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    let isValid = true;\n    Object.keys(validationRules).forEach(field => {\n      const error = validateField(field, values[field]);\n      if (error) {\n        newErrors[field] = error;\n        isValid = false;\n      }\n    });\n    setErrors(newErrors);\n    return isValid;\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    const fieldValue = type === 'checkbox' ? checked : value;\n    setValues(prev => ({\n      ...prev,\n      [name]: fieldValue\n    }));\n\n    // Validação em tempo real após o campo ser tocado\n    if (touched[name]) {\n      const error = validateField(name, fieldValue);\n      setErrors(prev => ({\n        ...prev,\n        [name]: error\n      }));\n    }\n  };\n  const handleBlur = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTouched(prev => ({\n      ...prev,\n      [name]: true\n    }));\n    const error = validateField(name, value);\n    setErrors(prev => ({\n      ...prev,\n      [name]: error\n    }));\n  };\n  const setFieldValue = (name, value) => {\n    setValues(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (touched[name]) {\n      const error = validateField(name, value);\n      setErrors(prev => ({\n        ...prev,\n        [name]: error\n      }));\n    }\n  };\n  const setFieldError = (name, error) => {\n    setErrors(prev => ({\n      ...prev,\n      [name]: error\n    }));\n  };\n  const reset = () => {\n    setValues(initialValues);\n    setErrors({});\n    setTouched({});\n  };\n  const setFormValues = newValues => {\n    setValues(newValues);\n  };\n  return {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    setFieldValue,\n    setFieldError,\n    validateForm,\n    reset,\n    setValues: setFormValues\n  };\n};\n_s(useForm, \"LuZJJpYS3AiPdupY3dSE9VLjb5E=\");","map":{"version":3,"names":["useState","useForm","initialValues","validationRules","_s","values","setValues","errors","setErrors","touched","setTouched","validateField","name","value","rules","rule","error","validateForm","newErrors","isValid","Object","keys","forEach","field","handleChange","e","type","checked","target","fieldValue","prev","handleBlur","setFieldValue","setFieldError","reset","setFormValues","newValues"],"sources":["C:/Users/unisanta/Desktop/Nova pasta/Connexa/src/hooks/useForm.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nexport const useForm = (initialValues, validationRules = {}) => {\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState({});\r\n  const [touched, setTouched] = useState({});\r\n\r\n  const validateField = (name, value) => {\r\n    const rules = validationRules[name];\r\n    if (!rules) return '';\r\n\r\n    for (const rule of rules) {\r\n      const error = rule(value, values);\r\n      if (error) return error;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    let isValid = true;\r\n\r\n    Object.keys(validationRules).forEach(field => {\r\n      const error = validateField(field, values[field]);\r\n      if (error) {\r\n        newErrors[field] = error;\r\n        isValid = false;\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    const fieldValue = type === 'checkbox' ? checked : value;\r\n\r\n    setValues(prev => ({\r\n      ...prev,\r\n      [name]: fieldValue,\r\n    }));\r\n\r\n    // Validação em tempo real após o campo ser tocado\r\n    if (touched[name]) {\r\n      const error = validateField(name, fieldValue);\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [name]: error,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    setTouched(prev => ({\r\n      ...prev,\r\n      [name]: true,\r\n    }));\r\n\r\n    const error = validateField(name, value);\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [name]: error,\r\n    }));\r\n  };\r\n\r\n  const setFieldValue = (name, value) => {\r\n    setValues(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n\r\n    if (touched[name]) {\r\n      const error = validateField(name, value);\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [name]: error,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const setFieldError = (name, error) => {\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [name]: error,\r\n    }));\r\n  };\r\n\r\n  const reset = () => {\r\n    setValues(initialValues);\r\n    setErrors({});\r\n    setTouched({});\r\n  };\r\n\r\n  const setFormValues = (newValues) => {\r\n    setValues(newValues);\r\n  };\r\n\r\n  return {\r\n    values,\r\n    errors,\r\n    touched,\r\n    handleChange,\r\n    handleBlur,\r\n    setFieldValue,\r\n    setFieldError,\r\n    validateForm,\r\n    reset,\r\n    setValues: setFormValues,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}