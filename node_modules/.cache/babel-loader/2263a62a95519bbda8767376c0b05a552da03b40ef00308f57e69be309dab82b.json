{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\unisanta\\\\Desktop\\\\Nova pasta\\\\Connexa\\\\src\\\\context\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nconst initialState = {\n  notifications: [],\n  unreadCount: 0,\n  isConnected: false,\n  socket: null\n};\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SOCKET':\n      return {\n        ...state,\n        socket: action.payload\n      };\n    case 'SET_CONNECTION_STATUS':\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case 'ADD_NOTIFICATION':\n      const newNotification = {\n        ...action.payload,\n        id: Date.now(),\n        timestamp: new Date(),\n        read: false\n      };\n      return {\n        ...state,\n        notifications: [newNotification, ...state.notifications],\n        unreadCount: state.unreadCount + 1\n      };\n    case 'MARK_AS_READ':\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => notification.id === action.payload ? {\n          ...notification,\n          read: true\n        } : notification),\n        unreadCount: Math.max(0, state.unreadCount - 1)\n      };\n    case 'MARK_ALL_AS_READ':\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => ({\n          ...notification,\n          read: true\n        })),\n        unreadCount: 0\n      };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(notification => notification.id !== action.payload),\n        unreadCount: Math.max(0, state.unreadCount - 1)\n      };\n    case 'CLEAR_ALL_NOTIFICATIONS':\n      return {\n        ...state,\n        notifications: [],\n        unreadCount: 0\n      };\n    default:\n      return state;\n  }\n};\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\n        auth: {\n          token\n        },\n        transports: ['websocket']\n      });\n      socket.on('connect', () => {\n        dispatch({\n          type: 'SET_CONNECTION_STATUS',\n          payload: true\n        });\n      });\n      socket.on('disconnect', () => {\n        dispatch({\n          type: 'SET_CONNECTION_STATUS',\n          payload: false\n        });\n      });\n      socket.on('notification', notification => {\n        dispatch({\n          type: 'ADD_NOTIFICATION',\n          payload: notification\n        });\n      });\n      dispatch({\n        type: 'SET_SOCKET',\n        payload: socket\n      });\n      return () => {\n        socket.disconnect();\n      };\n    }\n  }, []);\n  const markAsRead = notificationId => {\n    dispatch({\n      type: 'MARK_AS_READ',\n      payload: notificationId\n    });\n  };\n  const markAllAsRead = () => {\n    dispatch({\n      type: 'MARK_ALL_AS_READ'\n    });\n  };\n  const removeNotification = notificationId => {\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      payload: notificationId\n    });\n  };\n  const clearAllNotifications = () => {\n    dispatch({\n      type: 'CLEAR_ALL_NOTIFICATIONS'\n    });\n  };\n  const sendNotification = (type, message, data = {}) => {\n    if (state.socket) {\n      state.socket.emit('send_notification', {\n        type,\n        message,\n        data\n      });\n    }\n  };\n  const value = {\n    ...state,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAllNotifications,\n    sendNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = NotificationProvider;\nexport const useNotification = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification deve ser usado dentro de um NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","io","jsxDEV","_jsxDEV","NotificationContext","initialState","notifications","unreadCount","isConnected","socket","notificationReducer","state","action","type","payload","newNotification","id","Date","now","timestamp","read","map","notification","Math","max","filter","NotificationProvider","children","_s","dispatch","token","localStorage","getItem","process","env","REACT_APP_API_URL","auth","transports","on","disconnect","markAsRead","notificationId","markAllAsRead","removeNotification","clearAllNotifications","sendNotification","message","data","emit","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotification","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/unisanta/Desktop/Nova pasta/Connexa/src/context/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nconst initialState = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  isConnected: false,\r\n  socket: null,\r\n};\r\n\r\nconst notificationReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SOCKET':\r\n      return { ...state, socket: action.payload };\r\n    \r\n    case 'SET_CONNECTION_STATUS':\r\n      return { ...state, isConnected: action.payload };\r\n    \r\n    case 'ADD_NOTIFICATION':\r\n      const newNotification = {\r\n        ...action.payload,\r\n        id: Date.now(),\r\n        timestamp: new Date(),\r\n        read: false,\r\n      };\r\n      return {\r\n        ...state,\r\n        notifications: [newNotification, ...state.notifications],\r\n        unreadCount: state.unreadCount + 1,\r\n      };\r\n    \r\n    case 'MARK_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification =>\r\n          notification.id === action.payload\r\n            ? { ...notification, read: true }\r\n            : notification\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1),\r\n      };\r\n    \r\n    case 'MARK_ALL_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification => ({\r\n          ...notification,\r\n          read: true,\r\n        })),\r\n        unreadCount: 0,\r\n      };\r\n    \r\n    case 'REMOVE_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(\r\n          notification => notification.id !== action.payload\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1),\r\n      };\r\n    \r\n    case 'CLEAR_ALL_NOTIFICATIONS':\r\n      return {\r\n        ...state,\r\n        notifications: [],\r\n        unreadCount: 0,\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      const socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\r\n        auth: { token },\r\n        transports: ['websocket'],\r\n      });\r\n\r\n      socket.on('connect', () => {\r\n        dispatch({ type: 'SET_CONNECTION_STATUS', payload: true });\r\n      });\r\n\r\n      socket.on('disconnect', () => {\r\n        dispatch({ type: 'SET_CONNECTION_STATUS', payload: false });\r\n      });\r\n\r\n      socket.on('notification', (notification) => {\r\n        dispatch({ type: 'ADD_NOTIFICATION', payload: notification });\r\n      });\r\n\r\n      dispatch({ type: 'SET_SOCKET', payload: socket });\r\n\r\n      return () => {\r\n        socket.disconnect();\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const markAsRead = (notificationId) => {\r\n    dispatch({ type: 'MARK_AS_READ', payload: notificationId });\r\n  };\r\n\r\n  const markAllAsRead = () => {\r\n    dispatch({ type: 'MARK_ALL_AS_READ' });\r\n  };\r\n\r\n  const removeNotification = (notificationId) => {\r\n    dispatch({ type: 'REMOVE_NOTIFICATION', payload: notificationId });\r\n  };\r\n\r\n  const clearAllNotifications = () => {\r\n    dispatch({ type: 'CLEAR_ALL_NOTIFICATIONS' });\r\n  };\r\n\r\n  const sendNotification = (type, message, data = {}) => {\r\n    if (state.socket) {\r\n      state.socket.emit('send_notification', {\r\n        type,\r\n        message,\r\n        data,\r\n      });\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    removeNotification,\r\n    clearAllNotifications,\r\n    sendNotification,\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification deve ser usado dentro de um NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}